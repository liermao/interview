/*
重绘
由于节点的几何属性发生变化或者由于改变样式而不会影响布局，称为重绘。例如：outline, visibility, color、background-color等，
重绘的待机是高昂的，因为浏览器必须验证DOM树上其他元素的可见性。
*/
/*回流

回流是布局者或者几何属性需要改变就称为回流。回流是影响浏览器性能的关键因素，因为其他变化涉及部分页面的布局更新，
一个元素的回流可能会导致了其所有子元素以及DOM中紧随其后的节点、祖先节点元素的随后的回流。
*/

/*
回流必定会发生重绘，重绘不一定会引发回流。
*/
/*
减少重绘与回流
CSS

使用 transform 替代 top

使用 visibility 替换 display: none ，因为前者只会引起重绘，后者会引发回流（改变了布局

避免使用table布局，可能很小的一个小改动会造成整个 table 的重新布局。

尽可能在DOM树的最末端改变class，回流是不可避免的，但可以减少其影响。尽可能在DOM树的最末端改变class，可以限制了回流的范围，使其影响尽可能少的节点。

避免设置多层内联样式，CSS 选择符从右往左匹配查找，避免节点层级过多。
*/

/*
JavaScript

避免频繁操作样式，最好一次性重写style属性，或者将样式列表定义为class并一次性更改class属性。
避免频繁操作DOM，创建一个documentFragment，在它上面应用所有DOM操作，最后再把它添加到文档中。
避免频繁读取会引发回流/重绘的属性，如果确实需要多次使用，就用一个变量缓存起来。
对具有复杂动画的元素使用绝对定位，使它脱离文档流，否则会引起父元素及后续元素频繁回流。
*/
